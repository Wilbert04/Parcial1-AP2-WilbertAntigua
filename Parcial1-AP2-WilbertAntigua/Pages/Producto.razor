@page "/Producto"
@page "/Producto{ ProductoId:int}"

@inject IToastService Toast

<EditForm Model=" productos" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class=" card">
        <div class="card-header">
            <h3>Registo Productos</h3>
        </div>
        
        <div class=" card-body">
            <form>
                <div class=" form-row align-items-center">
                    <div class="col">
                        <div class=" form-group">
                            <label> ProductoId </label>
                            <div class=" input-group">
                                <InputNumber @bind-Value=" productos.ProductoId" class=" form-control col-4"></InputNumber>
                                <div class="input-group-append">
                                    <button type="button" class=" btn btn-primary input-group-text" @onclick="Buscar"> Buscar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Descripcion*@
                <div class=" form-group">
                    <label> Descripcion </label>
                    <InputText @bind-Value=" productos.Descripcion" class="form-control" />

                </div>

                @*Existencia*@
                <div class="= form-group">
                    <label> Existencia </label>
                    <InputNumber @bind-Value=" productos.Existencia" class="form-control"> </InputNumber>
                </div>

                @*Costo*@
                <div class="= form-group">
                    <label> Costo </label>
                    <InputNumber @bind-Value=" productos.ValorInvertario" class="form-control"> </InputNumber>
                    
                </div>

                <div class=" form-group">
                    <label> Valor Inventario</label>

                </div>

            </form>

        </div>

    </div>


</EditForm>



@code {

    private Productos productos = new Productos();
    [Parameter]
    public int ProductoId { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
    }

    private void Nuevo()
    {
        productos = new Productos();
    }

    private void Buscar()
    {
        if (productos.ProductoId > 0)
        {
            var encontrado = ProductosBLL.Buscar(productos.ProductoId);

            if(encontrado != null)
            {
                this.productos = encontrado;
            }
            else
            {
                Toast.ShowInfo("No encontrado...");
                Nuevo();
            }

        }
    }

    private void Guardar()
    {
        bool guardo;
        guardo = ProductosBLL.Guardar(productos);

        if (guardo)
        {
            Nuevo();
            Toast.ShowSuccess("Guardado Correctamente!");
        }
        else
        {
            Toast.ShowError("No fue posible guardar!!");
        }

    }

    private void Eliminar()
    {
        bool elimino;
        elimino = ProductosBLL.Eliminar(productos.ProductoId);

        if (elimino)
        {
            Nuevo();
            Toast.ShowSuccess("Eliminado Correctamente");

        }
        else
        {
            Toast.ShowSuccess("No se pudo eliminar");
        }

    }

    private void Inventario()
    {
        productos.ValorInvertario = productos.Existencia * productos.Costo;
    }
}
